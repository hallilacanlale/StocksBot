# -*- coding: utf-8 -*-
"""CS362_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19thMp8Am5DX0x_sVjJwVI2XgFlSu2N7z
"""

import pandas as pd
!pip install yfinance
!pip install yahoofinancials
import yfinance as yf
from yahoofinancials import YahooFinancials
import time



user_input = input("Ticker? ")

yahoo_financials = YahooFinancials(user_input)
data1 = yahoo_financials.get_historical_price_data(start_date='2019-01-01', 
                                                  end_date='2019-12-31', 
                                                  time_interval='weekly')
ticker = pd.DataFrame(data1[user_input]['prices'])
ticker = ticker.drop('date', axis=1).set_index('formatted_date')
print(ticker)



def rsi(df, window):
    print(type(df))
    diff = df.loc[:,'Close'].diff().tail(28)

    up = diff.clip(lower=0)
    down = -1 * diff.clip(upper=0)
    
    ma_up = up.ewm(com = window - 1, min_periods = window).mean()
    ma_down = down.ewm(com = window - 1, min_periods = window).mean()

    rs = abs(ma_up/ma_down)
    rsi = 100 - 100/(1+rs)
    return rsi

data = yf.download(
        tickers = user_input,
        period = "1d", # user_input
        interval = "1m", 
        group_by = 'ticker',
        auto_adjust = True)
print((data.loc[:,"Close"].tail(14)))

import serial
ser = serial.Serial('com5', 9600)

while True:
    count = chooseTicker(count)
    price = round(si.get_live_price(tickers[count]),2)
    ser.write(int(price).to_bytes(2, 'big'))
    ser.write(int((price%1)*100).to_bytes(1, 'big'))
    ser.write(int(closePrice[count]).to_bytes(2, 'big'))
    ser.write(int((closePrice[count]%1)*100).to_bytes(1, 'big'))

while True:
  print()
  data = yf.download(
        tickers = user_input,
        period = "1d", # user_input
        interval = "1m", 
        group_by = 'ticker',
        auto_adjust = True)
  print((data.loc[:,"Close"].tail(14)))
  res = rsi(data, 14)
  prev_res_val = res.iat[-2]
  curr_res_val = res.iat[-1]

  print(prev_res_val)
  print(curr_res_val)

  if (curr_res_val <= 30):
    print ("buy signal, buzzer")
  elif (curr_res_val >= 70): 
    print ("sell signal, buzzer")

  if (prev_res_val > curr_res_val):
    print ("red led light up")
  elif (prev_res_val < curr_res_val):
    print("green led light up")


  time.sleep(60)

res = rsi(data, 14)
print(res)
prev_res_val = res.iat[-2]
curr_res_val = res.iat[-1]

print(prev_res_val)
print(curr_res_val)

if (curr_res_val <= 30):
  print ("buy signal")
elif (curr_res_val >= 70): 
  print ("sell signal")





